name: MLOps Pipeline

on:
  workflow_dispatch:
    inputs:
      run_all:
        description: 'Run all jobs'
        required: false
        default: 'true'
      run_data_processing:
        description: 'Run data processing job'
        required: false
        default: 'false'
      run_model_training:
        description: 'Run model training job'
        required: false
        default: 'false'
      run_build_and_publish:
        description: 'Run build and publish job'
        required: false
        default: 'false'

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      run_dp: ${{ steps.set.outputs.run_dp }}
      run_tr: ${{ steps.set.outputs.run_tr }}
      run_bu: ${{ steps.set.outputs.run_bu }}
    steps:
      - id: set
        run: |
          RUN_ALL=${{ fromJSON(github.event.inputs.run_all || 'false') }}
          RUN_DP=${{ fromJSON(github.event.inputs.run_data_processing || 'false') }}
          RUN_TR=${{ fromJSON(github.event.inputs.run_model_training || 'false') }}
          RUN_BU=${{ fromJSON(github.event.inputs.run_build_and_publish || 'false') }}

          # Cascade downstream selections to upstream deps
          if [ "$RUN_TR" = "true" ] || [ "$RUN_BU" = "true" ]; then RUN_DP=true; fi
          if [ "$RUN_BU" = "true" ]; then RUN_TR=true; fi

          # If run_all=true, force everything true
          if [ "$RUN_ALL" = "true" ]; then RUN_DP=true; RUN_TR=true; RUN_BU=true; fi

          echo "run_dp=$RUN_DP" >> "$GITHUB_OUTPUT"
          echo "run_tr=$RUN_TR" >> "$GITHUB_OUTPUT"
          echo "run_bu=$RUN_BU" >> "$GITHUB_OUTPUT"

  data-processing:
    needs: [plan]
    if: ${{ fromJSON(needs.plan.outputs.run_dp) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.5'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Process data
        run: |
          python src/data/run_processing.py \
            --input data/raw/house_data.csv  \
            --output data/processed/cleaned_house_data.csv

      - name: Engineer features
        run: |
          python src/features/engineer.py \
            --input data/processed/cleaned_house_data.csv \
            --output data/processed/featured_house_data.csv \
            --preprocessor models/trained/preprocessor.pkl

      - name: Upload processed data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/processed/featured_house_data.csv

      - name: Upload pre-processor
        uses: actions/upload-artifact@v4
        with:
          name: preprocessor
          path: models/trained/preprocessor.pkl
  
  model-training:
    needs: [plan, data-processing]
    if: ${{ fromJSON(needs.plan.outputs.run_tr) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.5'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data/processed/

      - name: Setup MLFlow
        run: |
          docker pull ghcr.io/mlflow/mlflow:latest
          docker run -d -p 5555:5000 --name mlflow-server ghcr.io/mlflow/mlflow:latest \
            mlflow server --host 0.0.0.0 --backend-store-uri \
            sqlite:///mlflow.db --default-artifact-root /tmp/mlruns

      - name: Wait for MLflow to start
        run: |
          for i in {1..10}; do
            curl -f http://localhost:5555/health || sleep 5;
          done

      - name: Train the Model
        run: |
          mkdir -p models
          python src/models/train_model.py \
            --config configs/model_config.yaml \
            --data data/processed/featured_house_data.csv \
            --models-dir models \
            --mlflow-tracking-uri http://localhost:5555

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: models/

      - name: Clean up MLFlow
        run: |
          docker stop mlflow-server
          docker rm mlflow-server

  build-and-publish:
    needs: [plan, model-training]
    if: ${{ fromJSON(needs.plan.outputs.run_bu) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.5'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download pre-processor
        uses: actions/download-artifact@v4
        with:
          name: preprocessor
          path: models/trained/

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker image
        run: |
          COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          docker build -t docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:$COMMIT_HASH .
          docker run -d -p 8000:8000 --name test-api docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:$COMMIT_HASH
          for i in {1..10}; do
            curl -f http://localhost:8000/health && break || sleep 5;
          done
          docker logs test-api
      
      - name: Clean up Test Container
        run: |
          docker stop test-api || true
          docker rm test-api || true

      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Image to Dockerhub
        run: |
          COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          docker tag docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:$COMMIT_HASH docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:latest
          docker push docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:$COMMIT_HASH
          docker push docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model:latest


      